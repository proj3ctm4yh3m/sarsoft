#summary Installing and running Sarsoft.

= Installation =

Sarsoft is packaged as a JAR file; all you need to run it is Java 6.

 * Download the jar file at <a href="http://sarsoft.googlecode.com/files/sarsoft-0.4.jar">http://sarsoft.googlecode.com/files/sarsoft-0.4.1.jar</a>.

 * Start the jar file by typing `java -jar sarsoft-0.4.jar` at the command line or double-clicking the file in the windows file explorer.

 * Point your browser at http://localhost:8080 to access Sarsoft.

 * Working data will be placed in a folder named `.sarsoft`, in the directory you start the .jar file from.

 * If you want to use user-supplied georeferenced imagery, it is recommended that you increase the memory available to the JVM, e.g. by using `java -Xmx256M -jar sarsoft-0.4.jar` with the Sun JVM.

= Configuration =

Sarsoft is ready to use out of the box, with no external dependencies or configuration required.  You can customize it by passing arguments via a `sarsoft.properties` file in the directory you start the application from.  This is a standard Java key=value properties file.

=== Database ===

Sarsoft's default database is HSQL, which is an in-memory/filesystem database embedded within the application.  You can use a different database (MySQL is the only one which has been tested) using the following parameters:

{{{
hibernate.driverClass=[org.hsqldb.jdbcDriver | com.mysql.jdbc.Driver | etc ]
hibernate.jdbcUrl=jdbc:mysql:://hostname/dbname
hibernate.username=your username
hibernate.password=your password
hibernate.dialect=[org.hibernate.dialect.HSQLDialect | org.hibernate.dialect.MySQLDialect | etc ]
}}}

=== Map Viewer ===

Sarsoft comes with an embedded copy of the OpenLayers map viewer, which can be used offline when no internet connection is available.  It also supports Google Maps, which allows you to use Google's map background tiles.  OpenLayers is the default; you can switch to Google using

{{{
sarsoft.map.viewer=google
}}}

By default, Sarsoft will cache most map background tiles and serve them to other web clients.  This reduces network load in a bandwidth-constrained environment, but can be slower when a full internet connection is available.  You can disable this using

{{{
sarsoft.map.tileCacheEnabled=false
}}}

Sarsoft also allows users to upload images, align them, and then use them as map backgrounds (`Map Imagery` on the homepage).  Manipulating the image in Java uses a lot of memory; in memory-constrained environments you can disable this feature using

{{{
sarsoft.map.imageUploadEnabled=false
}}}

The default map for new searches covers the US.  You can customize Sarsoft to your location by specifying a latitude, longitude and zoom level.

{{{
sarsoft.map.default.zoom=5
sarsoft.map.default.lat=38
sarsoft.map.default.lng=-97
}}}

=== Map Backgrounds ===

Sarsoft comes with the following background layers preconfigured: OpenStreetMap Mapnik (mapnik), OpenStreetMap Osmarender (osm), MyTopo (mytopo), OpenCycleMap (ocm), USGS via Terraserver (usgs).  Google map layers are also available when using the Google Maps viewer.  You can control which layers are available using

{{{
sarsoft.map.backgrounds=osm.mapnik,mytopo,ocm,usgs
}}}

To add a new layer, it must either use the Web Map Service (WMS) api, or follow the standard zoom/x/y tile structure used in Google Maps.  In either case, you need to specify the name, type (WMS | TILE), copyright, min & max resolutions, whether the resulting image is a PNG file, and a URL template.  You also need to add your layer to the list of available backgrounds (see above).  The Mapnik and USGS layers are provided as examples of Tile and WMS layers, respectively:

{{{
sarsoft.map.background.mapnik.name=Mapnik
sarsoft.map.background.mapnik.type=TILE
sarsoft.map.background.mapnik.copyright=OSM
sarsoft.map.background.mapnik.maxresolution=17
sarsoft.map.background.mapnik.minresolution=0
sarsoft.map.background.mapnik.png=true
sarsoft.map.background.mapnik.template=http://tile.openstreetmap.org/{Z}/{X}/{Y}.png

sarsoft.map.background.usgs.name=USGS
sarsoft.map.background.usgs.type=WMS
sarsoft.map.background.usgs.copyright=USGS
sarsoft.map.background.usgs.minresolution=5
sarsoft.map.background.usgs.maxresolution=17
sarsoft.map.background.usgs.png=false
sarsoft.map.background.usgs.template=http://terraservice.net/ogcmap6.ashx?version=1.1.1&request=GetMap&styles=&srs=EPSG:4326&format=image/jpeg&bgcolor=0xCCCCCC&exceptions=INIMAGE&layers=DRG&bbox={left},{bottom},{right},{top}&width={tilesize}&height={tilesize}
}}}

Note that Sarsoft does not know how to directly speak WMS and requires you to supply a template with most of the information filled in except for the left, bottom, right and top coordinates and a tilesize parameter.

=== Serving Map Imagery Locally ===

Sarsoft allows you to store map background tiles locally and serve them up when no internet connection is available.  To do so, the tiles *must* be named using the zoom/x/y.png convention.  First, create a new map background as described above, using

{{{
sarsoft.map.background.mylayername.template=/resource/imagery/tiles/mylayername/{Z}/{X}/{Y}.png
}}}

as the template.  Second, you have to decide where your various map backgrounds will live.  The default is sardata/tiles, but you can customize this to be an absolute filesystem path or a relative path from the location you start the JAR in by setting

{{{
sarsoft.map.localTileStore=/path/to/files
}}}

To work with the default settings, create the sardata/tiles directory, a subdirectory matching your background layer name, and place the files in there.  If your layer is named "mylayername", You should wind up with tile 3,4 of zoom level 5 living at

{{{
sardata/tiles/mylayername/5/3/4.png
}}} 

=== API Keys ===

Both Google Maps and the Garmin Communicator plug-in (used to move data in/out of GPS devices) require API keys based on your host name.  This isn't relevant if you only use Sarsoft on one machine, but if you're hosting it on an internal network at the CP, you'll need to get API keys for your server's IP address or DNS name.  Sarsoft comes preconfigured to work with the following common internal IP ranges:

{{{
192.168.1.1 - 192.168.1.10
192.168.1.100 - 192.168.1.110
}}} 

You can add new API keys for specific hostnames or IP addresses using the following templates for 192.168.1.1 and sarsoft.org:

{{{
google.maps.apikey.192.168.1.1=api key
google.maps.apikey.sarsoft.org=api key

garmin.key.192.168.1.1=api key
garmin.key.sarsoft.org=api key
}}}